import duckdb

def generate_cpp_header(csv_file_path, header_file_path):
    con = duckdb.connect()
    df = con.execute(f"SELECT * FROM read_csv_auto('{csv_file_path}')").fetchdf()
    
    cpp_header = """//===----------------------------------------------------------------------===//
//                         Scrooge
//
// util/eth_uniswap_map.hpp
//
//===----------------------------------------------------------------------===//

//===----This file is auto-generated by scripts/generate_uniswap_map.py----===//

#pragma once

#include <unordered_map>
#include <string>

namespace duckdb {
namespace scrooge {
const unordered_map<string, string> uniswap_addresses = {
"""
    
    for _, row in df.iterrows():
        pair = f'{{"{row["token0_symbol"]}_{row["token1_symbol"]}", "{row["pair_address"]}"}}'
        cpp_header += f"    {pair},\n"
    
    cpp_header = cpp_header.rstrip(",\n") + "\n};\n\n"
    cpp_header+= "const vector<string> uniswap_symbols = {"
    for _, row in df.iterrows():
        cpp_header += f'"{row["token0_symbol"]}_{row["token1_symbol"]}",\n'
    cpp_header = cpp_header.rstrip(",\n") + "\n};"
    cpp_header+="\n}}"
    
    with open(header_file_path, 'w') as file:
        file.write(cpp_header)

csv_file_path = '/Users/holanda/Desktop/uniswap_pairs.csv'
header_file_path = 'src/include/util/eth_uniswap_map.hpp'
generate_cpp_header(csv_file_path, header_file_path)
