name: Linux
on: [push, pull_request,repository_dispatch]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true

jobs:
  linux-extensions-64:
    name: Linux Extensions
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      matrix:
        # empty string builds current submodule version, add commits/tags to build against other DuckDB versions
        duckdb_version: [ 'v0.7.0' ]
        arch: ['linux_amd64', 'linux_amd64_gcc4']
        include:
          - arch: 'linux_amd64'
            container: 'ubuntu:16.04'
          - arch: 'linux_amd64_gcc4'
            container: 'quay.io/pypa/manylinux2014_x86_64'
    env:
      GEN: ninja
      OPENSSL_ROOT_DIR: '/usr/local/ssl'

    steps:
    - name: Install required ubuntu packages
      if: ${{ matrix.arch == 'linux_amd64' || matrix.arch == 'linux_arm64' }}
      shell: bash
      run: |
        apt-get update -y -qq
        apt-get install -y -qq software-properties-common
        add-apt-repository ppa:git-core/ppa
        apt-get update -y -qq
        apt-get install -y -qq ninja-build make gcc-multilib g++-multilib libssl-dev wget openjdk-8-jdk zip maven unixodbc-dev libc6-dev-i386 lib32readline6-dev libssl-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip build-essential checkinstall libffi-dev curl libz-dev openssh-client


    - name: Install Git 2.18.5
      if: ${{ matrix.arch == 'linux_amd64' || matrix.arch == 'linux_arm64' }}
      shell: bash
      run: |
        wget https://github.com/git/git/archive/refs/tags/v2.18.5.tar.gz
        tar xvf v2.18.5.tar.gz
        cd git-2.18.5
        make
        make prefix=/usr install
        git --version

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: 'true'

    - if: ${{ matrix.arch == 'linux_amd64_gcc4' }}
      uses: ./duckdb/.github/actions/centos_7_setup
      with:
        openssl: 1

    - if: ${{ matrix.arch == 'linux_amd64' || matrix.arch == 'linux_arm64' }}
      uses: ./duckdb/.github/actions/ubuntu_16_setup
      with:
        aarch64_cross_compile: ${{ matrix.arch == 'linux_arm64' && 1 }}
        openssl: 0

    - name: Install Openssl
      if: ${{ matrix.arch == 'linux_amd64'}}
      shell: bash
      run: |
        wget https://www.openssl.org/source/openssl-1.1.1c.tar.gz
        tar -xf openssl-1.1.1c.tar.gz
        cd openssl-1.1.1c
        ./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl no-shared zlib-dynamic
        make
        make install
        echo "/usr/local/ssl/lib" > /etc/ld.so.conf.d/openssl-1.1.1c.conf
        ldconfig -v

    - name: Install Openssl
      if: ${{ matrix.arch == 'linux_arm64'}}
      shell: bash
      run: |
        mkdir -p build/openssl
        cd build/openssl
        mkdir sources build
        curl https://www.openssl.org/source/openssl-3.0.5.tar.gz | tar zxv -C sources --strip-components 1
        export OPENSSL_ROOT_DIR=`pwd`/build
        cd sources
        export CC="aarch64-linux-gnu-gcc"
        perl ./Configure --prefix=$OPENSSL_ROOT_DIR linux-aarch64 no-asm
        make -j
        make install_sw

    - name: Checkout DuckDB to version
      if: ${{ matrix.duckdb_version != ''}}
      shell: bash
      run: |
        cd duckdb
        git checkout ${{ matrix.duckdb_version }}

      # Build extension
    - name: Build extension
      shell: bash
      env:
        GEN: ninja
        STATIC_LIBCPP: 1
        CC: ${{ matrix.arch == 'linux_arm64' && 'aarch64-linux-gnu-gcc' || '' }}
        CXX: ${{ matrix.arch == 'linux_arm64' && 'aarch64-linux-gnu-g++' || '' }}
      run: |
        make release

    - name: Run Tests
      shell: bash
      run: |
        make test

    - uses: actions/upload-artifact@v2
      with:
        name: ${{matrix.arch}}-extensions
        path: |
          build/release/extension/scrooge/scrooge.duckdb_extension

    # - name: Deploy
    #   shell: bash
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.S3_DEPLOY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DEPLOY_KEY }}
    #     AWS_DEFAULT_REGION: ${{ secrets.S3_REGION }}
    #     BUCKET_NAME: ${{ secrets.S3_BUCKET }}
    #   run: |
    #     git config --global --add safe.directory '*'
    #     cd duckdb
    #     git fetch --tags
    #     export DUCKDB_VERSION=`git tag --points-at HEAD`
    #     export DUCKDB_VERSION=${DUCKDB_VERSION:=`git log -1 --format=%h`}
    #     cd ..
    #     if [[ "$AWS_ACCESS_KEY_ID" == "" ]] ; then
    #       echo 'No key set, skipping'
    #     elif [[ "$GITHUB_REF" =~ ^(refs/tags/v.+)$ ]] ; then
    #       python3 -m pip install pip awscli
    #       ./scripts/extension-upload.sh scrooge ${{ github.ref_name }} $DUCKDB_VERSION ${{matrix.arch}} $BUCKET_NAME
    #     elif [[ "$GITHUB_REF" =~ ^(refs/heads/main)$ ]] ; then
    #       python3 -m pip install pip awscli
    #       ./scripts/extension-upload.sh scrooge `git log -1 --format=%h` $DUCKDB_VERSION ${{matrix.arch}} $BUCKET_NAME
    #     fi